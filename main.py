import time
import random
from web3 import Web3

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ RPC –¥–ª—è Ethereum Mainnet
RPC_URL = "https://ethereum-rpc.publicnode.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à RPC-–∫–ª—é—á
web3 = Web3(Web3.HTTPProvider(RPC_URL))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
if not web3.is_connected():
    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC-—É–∑–ª—É Ethereum Mainnet")

# üéØ –î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH (–≤ ETH)
MIN_AMOUNT_TO_SEND_ETH = 0.065
MAX_AMOUNT_TO_SEND_ETH = 0.07

# –ó–∞–¥–µ—Ä–∂–∫–∏
MIN_DELAY = 2000
MAX_DELAY = 10000
BALANCE_CHECK_DELAY = 1

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_wallets(file_path):
    wallets = []
    with open(file_path, "r") as file:
        for line in file:
            private_key, receiver_address = line.strip().split(":")
            if not private_key.startswith("0x"):
                private_key = "0x" + private_key
            wallets.append((private_key, receiver_address))
    return wallets

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
def check_balances(wallets):
    print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ (Mainnet) ---\n")
    for private_key, receiver_address in wallets:
        sender_address = web3.eth.account.from_key(private_key).address
        balance = web3.eth.get_balance(sender_address)
        eth_balance = web3.from_wei(balance, "ether")
        print(f"–ê–¥—Ä–µ—Å: {sender_address} | –ë–∞–ª–∞–Ω—Å: {eth_balance:.6f} ETH")
        time.sleep(BALANCE_CHECK_DELAY)
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

# –û—Ç–ø—Ä–∞–≤–∫–∞ ETH –≤ —Å–ª—É—á–∞–π–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
def send_eth(private_key, receiver_address):
    account = web3.eth.account.from_key(private_key)
    sender_address = account.address
    balance = web3.eth.get_balance(sender_address)
    eth_balance = web3.from_wei(balance, "ether")
    print(f"–ë–∞–ª–∞–Ω—Å {sender_address}: {eth_balance:.6f} ETH")

    # –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ ETH –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ wei
    random_amount_eth = round(random.uniform(MIN_AMOUNT_TO_SEND_ETH, MAX_AMOUNT_TO_SEND_ETH), 8)
    amount_to_send_wei = web3.to_wei(random_amount_eth, "ether")

    gas_price = web3.eth.gas_price
    gas_limit = 21000
    gas_fee = gas_price * gas_limit

    if balance < amount_to_send_wei + gas_fee:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {random_amount_eth} ETH —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏.")
        return

    receiver_address = Web3.to_checksum_address(receiver_address)
    tx = {
        "from": sender_address,
        "to": receiver_address,
        "value": amount_to_send_wei,
        "gas": gas_limit,
        "gasPrice": gas_price,
        "nonce": web3.eth.get_transaction_count(sender_address),
        "chainId": 1,
    }

    signed_tx = web3.eth.account.sign_transaction(tx, private_key)

    try:
        tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {random_amount_eth} ETH | Hash: {web3.to_hex(tx_hash)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –û–±—Ö–æ–¥ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
def send_eth_to_wallets(wallets):
    print("\n--- –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞—á–∏ ETH (Mainnet) ---\n")
    for private_key, receiver_address in wallets:
        print(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å {private_key[:10]}... –Ω–∞ {receiver_address}")
        send_eth(private_key, receiver_address)
        delay = random.randint(MIN_DELAY, MAX_DELAY)
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
        time.sleep(delay)
    print("\n‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ ETH –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    wallets = load_wallets("wallets.txt")
    while True:
        print("\n--- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤ (Mainnet)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É ETH")
        print("3. –í—ã–π—Ç–∏")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

        if choice == "1":
            check_balances(wallets)
        elif choice == "2":
            send_eth_to_wallets(wallets)
        elif choice == "3":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    main_menu()
