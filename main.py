import time
import random
from web3 import Web3

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ Mainnet
RPC_URL = "https://ethereum-rpc.publicnode.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π RPC
web3 = Web3(Web3.HTTPProvider(RPC_URL))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
if not web3.is_connected():
    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC-—É–∑–ª—É Ethereum Mainnet")

SEND_PERCENTAGE = 1  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ ETH
MIN_DELAY = 5
MAX_DELAY = 10
BALANCE_CHECK_DELAY = 1

def load_wallets(file_path):
    wallets = []
    with open(file_path, "r") as file:
        for line in file:
            private_key, receiver_address = line.strip().split(":")
            if not private_key.startswith("0x"):
                private_key = "0x" + private_key
            wallets.append((private_key, receiver_address))
    return wallets

def check_balances(wallets):
    print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ (Mainnet) ---\n")
    for private_key, receiver_address in wallets:
        sender_address = web3.eth.account.from_key(private_key).address
        balance = web3.eth.get_balance(sender_address)
        eth_balance = web3.from_wei(balance, "ether")
        print(f"–ê–¥—Ä–µ—Å: {sender_address} | –ë–∞–ª–∞–Ω—Å: {eth_balance:.6f} ETH")
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ {BALANCE_CHECK_DELAY} —Å–µ–∫—É–Ω–¥...")
        time.sleep(BALANCE_CHECK_DELAY)
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

def send_eth(private_key, receiver_address, percentage):
    account = web3.eth.account.from_key(private_key)
    sender_address = account.address
    balance = web3.eth.get_balance(sender_address)
    eth_balance = web3.from_wei(balance, "ether")
    print(f"–ë–∞–ª–∞–Ω—Å {sender_address}: {eth_balance:.6f} ETH")

    amount_to_send = int(balance * (percentage / 100))
    if amount_to_send == 0:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å {sender_address}")
        return

    receiver_address = Web3.to_checksum_address(receiver_address)
    tx = {
        "from": sender_address,
        "to": receiver_address,
        "value": amount_to_send,
        "gas": 21000,
        "gasPrice": web3.eth.gas_price,
        "nonce": web3.eth.get_transaction_count(sender_address),
        "chainId": 1,  # ‚úÖ Mainnet chain ID
    }

    signed_tx = web3.eth.account.sign_transaction(tx, private_key)

    try:
        tx_hash = web3.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Hash: {web3.to_hex(tx_hash)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def send_eth_to_wallets(wallets, percentage):
    print("\n--- –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥–∞—á–∏ ETH (Mainnet) ---\n")
    for private_key, receiver_address in wallets:
        print(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å {private_key[:10]}... –Ω–∞ {receiver_address}")
        send_eth(private_key, receiver_address, percentage)
        delay = random.randint(MIN_DELAY, MAX_DELAY)
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥...")
        time.sleep(delay)
    print("\n‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ ETH –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

def main_menu():
    wallets = load_wallets("wallets.txt")
    while True:
        print("\n--- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤ (Mainnet)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É ETH")
        print("3. –í—ã–π—Ç–∏")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

        if choice == "1":
            check_balances(wallets)
        elif choice == "2":
            send_eth_to_wallets(wallets, SEND_PERCENTAGE)
        elif choice == "3":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main_menu()
